5<?php
	include 'db.php';
	include 'validate.php';
	if (!isset($_GET['pwd'])) { exit(); }
	if ($_GET['pwd'] != "HardCodedToChange") { exit(); }
	try {
		//$id = getIdFromToken($db);
		$stmt = $db->prepare("SELECT skill_tree.user_id,skill_tree.st_hourly,t.attacker_id,t.tot_gpu,TIMESTAMPDIFF(DAY,user.last_login,NOW()) as days FROM skill_tree JOIN user ON skill_tree.user_id=user.id LEFT JOIN (SELECT attacker_id,SUM(upgrades.gpu) as tot_gpu FROM botnet JOIN upgrades ON botnet.defense_id = upgrades.id GROUP BY attacker_id) as t ON skill_tree.user_id=t.attacker_id");		
		$stmt->execute();
		
		$arr = $stmt->fetchAll(PDO::FETCH_ASSOC);
		foreach ($arr as $row) {
			$user_id = $row['user_id'];
			$st_hourly = $row['st_hourly'];
			$attacker_id = $row['attacker_id'];
			$days = $row['days'];
			if ($row['tot_gpu'] === NULL) { $tot_gpu=0; }
			else { $tot_gpu=$row['tot_gpu']; }
			if ($tot_gpu<=10000) { $tot_gpu=$tot_gpu*100; }
			elseif ($tot_gpu<=20000) { $tot_gpu=($tot_gpu-10000)*75+1000000; }
			elseif ($tot_gpu<=30000) { $tot_gpu=($tot_gpu-20000)*50+1750000; }
			else { $tot_gpu=($tot_gpu-30000)*30+2250000; }
			$tot_gpu=$tot_gpu*2;
			//Skill Tree Contribution
			$tot_gpu = $tot_gpu+(20000*($st_hourly+1));
			$tot_gpu = $tot_gpu+($tot_gpu/100*($st_hourly*2));
			$tot_gpu=$tot_gpu/2;			
			//Economy Adjustment - Less Money generated on inactive players
			//GitHub Note: Normal Economy: 0.35. If Economy is low->increase, if it's high->decrease
			if (($days>5) and ($days<=10)) { $tot_gpu=round($tot_gpu*0.35); }
			elseif (($days>10) and ($days<=30)) { $tot_gpu=round($tot_gpu*0.35); }
			elseif ($days>30) { $tot_gpu=round($tot_gpu*0.35); }

			$stmt = $db->prepare("UPDATE user SET money=money+? where id=?");
			$stmt->bindValue(1, $tot_gpu, PDO::PARAM_INT);
			$stmt->bindValue(2, $user_id, PDO::PARAM_INT);
			$stmt->execute();
			
			$stmt = $db->prepare("UPDATE economy SET bots=bots+?,income=income+? where user_id=?");
			$stmt->bindValue(1, $tot_gpu, PDO::PARAM_INT);
			$stmt->bindValue(2, $tot_gpu, PDO::PARAM_INT);
			$stmt->bindValue(3, $user_id, PDO::PARAM_INT);
			$stmt->execute();	
		}

		//echo "OK";
		exit();
	} catch(PDOException $ex) {
		echo "An Error occured!\n$ex";
	}
?>